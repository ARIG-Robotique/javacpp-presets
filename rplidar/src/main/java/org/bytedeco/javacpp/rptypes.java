// Targeted by JavaCPP version 1.2.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class rptypes extends org.bytedeco.javacpp.presets.rptypes {
    static { Loader.load(); }

// Parsed from <rptypes.h>

/*
 *  RPLIDAR SDK
 *
 *  Copyright (c) 2009 - 2014 RoboPeak Team
 *  http://www.robopeak.com
 *  Copyright (c) 2014 - 2016 Shanghai Slamtec Co., Ltd.
 *  http://www.slamtec.com
 *
 */
/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// #pragma once


// #ifdef _WIN32

//fake stdint.h for VC only

// #else

// #include <stdint.h>

// #endif


//based on stdint.h

// #define __small_endian

// #ifndef __GNUC__
// #define __attribute__(x)
// #endif


// The _word_size_t uses actual data bus width of the current CPU
// #ifdef _AVR_
// #define THREAD_PROC    
// #elif defined (WIN64)
// #define THREAD_PROC    __stdcall
// #elif defined (WIN32)
// #define THREAD_PROC    __stdcall
// #elif defined (__GNUC__)
// #define THREAD_PROC   
// #elif defined (__ICCARM__)
// #define THREAD_PROC  
// #endif

public static final int RESULT_OK =              0;
public static final int RESULT_FAIL_BIT =        0x80000000;
public static final int RESULT_ALREADY_DONE =    0x20;
public static final int RESULT_INVALID_DATA =    (0x8000 | RESULT_FAIL_BIT);
public static final int RESULT_OPERATION_FAIL =  (0x8001 | RESULT_FAIL_BIT);
public static final int RESULT_OPERATION_TIMEOUT =  (0x8002 | RESULT_FAIL_BIT);
public static final int RESULT_OPERATION_STOP =    (0x8003 | RESULT_FAIL_BIT);
public static final int RESULT_OPERATION_NOT_SUPPORT =    (0x8004 | RESULT_FAIL_BIT);
public static final int RESULT_FORMAT_NOT_SUPPORT =    (0x8005 | RESULT_FAIL_BIT);
public static final int RESULT_INSUFFICIENT_MEMORY =   (0x8006 | RESULT_FAIL_BIT);

// #define IS_OK(x)    ( ((x) & RESULT_FAIL_BIT) == 0 )
// #define IS_FAIL(x)  ( ((x) & RESULT_FAIL_BIT) )

public static class thread_proc_t extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    thread_proc_t(Pointer p) { super(p); }
    protected thread_proc_t() { allocate(); }
    private native void allocate();
    public native @Cast("_word_size_t") byte call( Pointer arg0 );
}


}
