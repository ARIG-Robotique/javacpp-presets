// Targeted by JavaCPP version 1.2.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class rplidar_cmd extends org.bytedeco.javacpp.presets.rplidar_cmd {
    static { Loader.load(); }

// Parsed from <rplidar_cmd.h>

/*
 *  RPLIDAR SDK
 *
 *  Copyright (c) 2009 - 2014 RoboPeak Team
 *  http://www.robopeak.com
 *  Copyright (c) 2014 - 2016 Shanghai Slamtec Co., Ltd.
 *  http://www.slamtec.com
 *
 */
/*
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// #pragma once

// #include "rplidar_protocol.h"

// Commands
//-----------------------------------------

// Commands without payload and response
public static final int RPLIDAR_CMD_STOP =               0x25;
public static final int RPLIDAR_CMD_SCAN =               0x20;
public static final int RPLIDAR_CMD_FORCE_SCAN =         0x21;
public static final int RPLIDAR_CMD_RESET =              0x40;


// Commands without payload but have response
public static final int RPLIDAR_CMD_GET_DEVICE_INFO =    0x50;
public static final int RPLIDAR_CMD_GET_DEVICE_HEALTH =  0x52;

public static final int RPLIDAR_CMD_GET_SAMPLERATE =     0x59; //added in fw 1.17

// Commands with payload and have response
public static final int RPLIDAR_CMD_EXPRESS_SCAN =       0x82; //added in fw 1.17

//add for A2 to set RPLIDAR motor pwm when using accessory board
public static final int RPLIDAR_CMD_SET_MOTOR_PWM =      0xF0;
public static final int RPLIDAR_CMD_GET_ACC_BOARD_FLAG = 0xFF;

// #if defined(_WIN32)
// #pragma pack(1)
// #endif


// Payloads
// ------------------------------------------
public static final int RPLIDAR_EXPRESS_SCAN_MODE_NORMAL =      0; 
public static final int RPLIDAR_EXPRESS_SCAN_MODE_FIXANGLE =    1;

public static final int MAX_MOTOR_PWM =               1023;
public static final int DEFAULT_MOTOR_PWM =           660;

// Response
// ------------------------------------------
public static final int RPLIDAR_ANS_TYPE_DEVINFO =          0x4;
public static final int RPLIDAR_ANS_TYPE_DEVHEALTH =        0x6;

public static final int RPLIDAR_ANS_TYPE_MEASUREMENT =                0x81;
// Added in FW ver 1.17
public static final int RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED =       0x82;

// Added in FW ver 1.17
public static final int RPLIDAR_ANS_TYPE_SAMPLE_RATE =      0x15;

public static final int RPLIDAR_ANS_TYPE_ACC_BOARD_FLAG =   0xFF;

public static final int RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK =      (0x1);


public static final int RPLIDAR_STATUS_OK =                 0x0;
public static final int RPLIDAR_STATUS_WARNING =            0x1;
public static final int RPLIDAR_STATUS_ERROR =              0x2;

public static final int RPLIDAR_RESP_MEASUREMENT_SYNCBIT =        (0x1<<0);
public static final int RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT =  2;
public static final int RPLIDAR_RESP_MEASUREMENT_CHECKBIT =       (0x1<<0);
public static final int RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT =    1;

//[distance_sync flags]
public static final int RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK =           (0x3);
public static final int RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK =        (0xFC);   


public static final int RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_1 =               0xA;
public static final int RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_2 =               0x5;

public static final int RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT =              (0x1<<15);

// #if defined(_WIN32)
// #pragma pack()
// #endif


}
